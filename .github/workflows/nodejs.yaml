name: Node.js CI/CD

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"
      - run: npm install

  connect-to-cf-tunnel:
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
      CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}

    steps:
      - name: Setup Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
          chmod +x cloudflared-linux-amd64
          sudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared
          cloudflared --version

      - name: Setup SSH key
        run: |
          echo "${{ secrets.TERRAFORM_SSH_KEY }}" > private_key
          chmod 600 private_key

      - name: SSH Config
        run: |
          mkdir -p ~/.ssh
          echo "Host ssh-dev.cstrube.de" > ~/.ssh/config
          echo "  HostName ssh-dev.cstrube.de" >> ~/.ssh/config
          echo "  Port 22" >> ~/.ssh/config
          echo "  User christian" >> ~/.ssh/config
          echo "  IdentityFile $(pwd)/private_key" >> ~/.ssh/config
          echo "  ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h --client-id $CF_ACCESS_CLIENT_ID --client-secret $CF_ACCESS_CLIENT_SECRET" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config


  deploy:
    runs-on: ubuntu-latest
    needs: connect-to-cf-tunnel
    env:
      DOCKER_IMAGE_TAG: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      CONTAINER_NAME: ${{ github.ref == 'refs/heads/main' && 'parken_app' || 'parken_app-dev' }}
      SSH_USERNAME: christian
      SSH_HOST: ssh-dev.cstrube.de

    steps:
      - uses: actions/checkout@v3
      - name: Build and Deploy
        run: |
          docker build -t parken_app:$DOCKER_IMAGE_TAG .
          docker save -o parken_app.tar parken_app:$DOCKER_IMAGE_TAG
          scp parken_app.tar $SSH_USERNAME@$SSH_HOST:/tmp/
          ssh $SSH_USERNAME@$SSH_HOST "docker load -i /tmp/parken_app.tar && docker stop $CONTAINER_NAME || true && docker rm $CONTAINER_NAME || true && docker run -d --name $CONTAINER_NAME -p ${github.ref == 'refs/heads/main' && '3000' || '3001'}:${github.ref == 'refs/heads/main' && '3000' || '3001'} parken_app:$DOCKER_IMAGE_TAG"
