name: Node.js CI/CD

on:
  push:
    branches:
      - main
      - dev
defaults:
  run:
    working-directory: /
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: '14.x'
    - run: npm install

  deploy-to-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Build and Deploy to Production
      working-directory: ./parken_app
      env:
        TERRAFORM_SSH_KEY: ${{ secrets.TERRAFORM_SSH_KEY }}
        SSH_USERNAME: christian
        SSH_HOST: deploy.cstrube.de
        DOCKER_IMAGE_TAG: production

      run: |
        docker build -t parken_app:$DOCKER_IMAGE_TAG .
        docker save -o parken_app.tar parken_app:$DOCKER_IMAGE_TAG
        scp -i $TERRAFORM_SSH_KEY parken_app.tar $SSH_USERNAME@$SSH_HOST:/tmp/
        ssh -i $TERRAFORM_SSH_KEY $SSH_USERNAME@$SSH_HOST "docker load -i /tmp/parken_app.tar && docker stop parken_app || true && docker rm parken_app || true && docker run -d --name parken_app -p 3000:3000 parken_app:$DOCKER_IMAGE_TAG"

  deploy-to-dev:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'

    steps:
    - name: Build and Deploy to Development
      working-directory: ./parken_app
      env:
        TERRAFORM_SSH_KEY: ${{ secrets.TERRAFORM_SSH_KEY }}
        SSH_USERNAME: christian
        SSH_HOST: deploy.cstrube.de
        DOCKER_IMAGE_TAG: development

      run: |
        docker build -t parken_app:$DOCKER_IMAGE_TAG .
        docker save -o parken_app.tar parken_app:$DOCKER_IMAGE_TAG
        scp -i $TERRAFORM_SSH_KEY parken_app.tar $SSH_USERNAME@$SSH_HOST:/tmp/
        ssh -i $TERRAFORM_SSH_KEY $SSH_USERNAME@$SSH_HOST "docker load -i /tmp/parken_app.tar && docker stop parken_app-dev || true && docker rm parken_app-dev || true && docker run -d --name parken_app-dev -p 3001:3001 parken_app:$DOCKER_IMAGE_TAG"
