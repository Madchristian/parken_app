name: Node.js CI/CD

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"
      - run: npm install

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      DOCKER_IMAGE_TAG: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      CONTAINER_NAME: ${{ github.ref == 'refs/heads/main' && 'parken_app' || 'parken_app-dev' }}
      SSH_USERNAME: christian
      SSH_HOST: ssh-dev-01.cstrube.de
      PRIVATE_SSH_KEY: ${{ secrets.PRIVATE_SSH_KEY }}

    steps:
      - uses: actions/checkout@v3
      - name: Setup Cloudflared
        run: |
          aria2c -x 16 "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64"
          chmod +x cloudflared-linux-amd64
          sudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared
          echo "CLOUDFLARED_PATH=/usr/local/bin" >> $GITHUB_ENV
          cloudflared --version

      - name: Setup SSH Config
        env:
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
        run: |
          mkdir -p ~/.ssh
          echo "  Host ssh-dev-01.cstrube.de" > ~/.ssh/config
          echo "  HostName ssh-dev-01.cstrube.de" >> ~/.ssh/config
          echo "  ProxyCommand $CLOUDFLARED_PATH/cloudflared access ssh --hostname %h --id $CF_ACCESS_CLIENT_ID --secret $CF_ACCESS_CLIENT_SECRET --verbose" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config


      - name: Log Information
        run: |
          echo "Debugging SSH Connection:"
          echo "SSH_HOST: $SSH_HOST"
          echo "SSH_USERNAME: $SSH_USERNAME"
          echo "Cloudflared version:"
          $CLOUDFLARED_PATH/cloudflared --version
          echo "SSH Config:"
          cat ~/.ssh/config

      - name: Build and Deploy
        run: |
          echo "$PRIVATE_SSH_KEY" > private_key
          chmod 600 private_key
          docker build -t parken_app:$DOCKER_IMAGE_TAG .
          docker save -o parken_app.tar parken_app:$DOCKER_IMAGE_TAG
          scp -v -i private_key parken_app.tar $SSH_USERNAME@$SSH_HOST:/tmp/
          ssh -v -i private_key $SSH_USERNAME@$SSH_HOST "docker load -i /tmp/parken_app.tar && docker stop $CONTAINER_NAME || true && docker rm $CONTAINER_NAME || true && docker run -d --name $CONTAINER_NAME -p 3001:3001 parken_app:$DOCKER_IMAGE_TAG"
