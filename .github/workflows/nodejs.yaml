name: Node.js CI/CD

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"
      - run: npm install

  connect-to-cf-tunnel:
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
      CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}

    steps:
    - name: Setup Cloudflare Tunnel
      uses: AnimMouse/setup-cloudflared@v1
      with:
        cloudflare_tunnel_credential: ${{ secrets.CLOUDFLARE_TUNNEL_CREDENTIAL }}
        cloudflare_tunnel_configuration: ${{ secrets.CLOUDFLARE_TUNNEL_CONFIGURATION }}
        cloudflare_tunnel_id: ${{ secrets.CLOUDFLARE_TUNNEL_ID }}

  deploy:
    runs-on: ubuntu-latest
    needs: connect-to-cf-tunnel
    env:
      DOCKER_IMAGE_TAG: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      CONTAINER_NAME: ${{ github.ref == 'refs/heads/main' && 'parken_app' || 'parken_app-dev' }}
      SSH_USERNAME: christian
      SSH_HOST: ssh-dev.cstrube.de
      TERRAFORM_SSH_KEY: ${{ secrets.TERRAFORM_SSH_KEY }}

    steps:
    - uses: actions/checkout@v3
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "$TERRAFORM_SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "Host $SSH_HOST" > ~/.ssh/config
        echo "  HostName $SSH_HOST" >> ~/.ssh/config
        echo "  Port 22" >> ~/.ssh/config
        echo "  User $SSH_USERNAME" >> ~/.ssh/config
        echo "  IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
        echo "  ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h --client-id $CF_ACCESS_CLIENT_ID --client-secret $CF_ACCESS_CLIENT_SECRET" >> ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config
        echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
    - name: Build and Deploy
      run: |
        docker build -t parken_app:$DOCKER_IMAGE_TAG .
        docker save -o parken_app.tar parken_app:$DOCKER_IMAGE_TAG
        scp parken_app.tar $SSH_USERNAME@$SSH_HOST:/tmp/
        ssh $SSH_USERNAME@$SSH_HOST "docker load -i /tmp/parken_app.tar && docker stop $CONTAINER_NAME || true && docker rm $CONTAINER_NAME || true && docker run -d --name $CONTAINER_NAME -p 3001:3001 parken_app:$DOCKER_IMAGE_TAG"
